
03_Shift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063f  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005af  00000000  00000000  000007bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023e  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001373  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	// Portc als Ausgang definieren
	DDRC = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	
	// die 0. LED einschalten
	//PORTC = 0x01;
	PORTC = 0x03;
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2f ef       	ldi	r18, 0xFF	; 255
  76:	8e e9       	ldi	r24, 0x9E	; 158
  78:	94 e2       	ldi	r25, 0x24	; 36
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	80 40       	sbci	r24, 0x00	; 0
  7e:	90 40       	sbci	r25, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
		//PORTC = (PORTC<<1);
		//
		
		// Rotieren umd 1. stelle
		
		PORTC = (PORTC<<1) | (PORTC>>7);
  86:	95 b3       	in	r25, 0x15	; 21
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	99 0f       	add	r25, r25
  8c:	88 1f       	adc	r24, r24
  8e:	88 27       	eor	r24, r24
  90:	88 1f       	adc	r24, r24
  92:	89 2b       	or	r24, r25
  94:	85 bb       	out	0x15, r24	; 21
  96:	ee cf       	rjmp	.-36     	; 0x74 <main+0x8>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
