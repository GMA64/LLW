
08_ProjektLEDPotenztiometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000711  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060e  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000192  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001775  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8adc_initv>:
        
        average /= size;    // Build average
        
        // Return average as unsigned int
        return (unsigned int)(average);
    }
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
  70:	86 e0       	ldi	r24, 0x06	; 6
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <_Z11adc_channelh>:
  76:	97 b1       	in	r25, 0x07	; 7
  78:	98 7f       	andi	r25, 0xF8	; 248
  7a:	87 70       	andi	r24, 0x07	; 7
  7c:	89 2b       	or	r24, r25
  7e:	87 b9       	out	0x07, r24	; 7
  80:	08 95       	ret

00000082 <_Z8adc_readv>:
  82:	86 b1       	in	r24, 0x06	; 6
  84:	80 6c       	ori	r24, 0xC0	; 192
  86:	86 b9       	out	0x06, r24	; 6
  88:	36 9b       	sbis	0x06, 6	; 6
  8a:	03 c0       	rjmp	.+6      	; 0x92 <_Z8adc_readv+0x10>
  8c:	00 00       	nop
  8e:	36 99       	sbic	0x06, 6	; 6
  90:	fd cf       	rjmp	.-6      	; 0x8c <_Z8adc_readv+0xa>
  92:	84 b1       	in	r24, 0x04	; 4
  94:	25 b1       	in	r18, 0x05	; 5
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	92 2b       	or	r25, r18
  9a:	08 95       	ret

0000009c <main>:
#include "adc.c"

int main(void)
{
	// PORTC als LED ausgang
	DDRC = 0xff;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	84 bb       	out	0x14, r24	; 20
	
	// initialise AD
	adc_init();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8adc_initv>
	adc_channel(5);
  a4:	85 e0       	ldi	r24, 0x05	; 5
  a6:	0e 94 3b 00 	call	0x76	; 0x76 <_Z11adc_channelh>
	
    while (1) 
    {	
		unsigned char data = (adc_read()>>7);
		
		PORTC = (1<<data);
  aa:	c1 e0       	ldi	r28, 0x01	; 1
  ac:	d0 e0       	ldi	r29, 0x00	; 0
	adc_init();
	adc_channel(5);
	
    while (1) 
    {	
		unsigned char data = (adc_read()>>7);
  ae:	0e 94 41 00 	call	0x82	; 0x82 <_Z8adc_readv>
		
		PORTC = (1<<data);
  b2:	88 0f       	add	r24, r24
  b4:	89 2f       	mov	r24, r25
  b6:	88 1f       	adc	r24, r24
  b8:	99 0b       	sbc	r25, r25
  ba:	91 95       	neg	r25
  bc:	9e 01       	movw	r18, r28
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x28>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <main+0x24>
  c8:	25 bb       	out	0x15, r18	; 21
  ca:	f1 cf       	rjmp	.-30     	; 0xae <main+0x12>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
