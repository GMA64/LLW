
05_TasterPrellen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ea  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	// PORTC leds auf ausgang
	DDRC = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20

	// PORTA auf eingang
	DDRA = 0x00;
  70:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x0f;
  72:	8f e0       	ldi	r24, 0x0F	; 15
  74:	8b bb       	out	0x1b, r24	; 27
	unsigned char x = 0;
  76:	80 e0       	ldi	r24, 0x00	; 0
    while (1) 
    {
		if (!(PINA & (0x01)))
  78:	c8 99       	sbic	0x19, 0	; 25
  7a:	fe cf       	rjmp	.-4      	; 0x78 <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	ef e1       	ldi	r30, 0x1F	; 31
  7e:	fe e4       	ldi	r31, 0x4E	; 78
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x14>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
		{
			_delay_ms(5);
			x++;
  88:	8f 5f       	subi	r24, 0xFF	; 255
			PORTC = x;
  8a:	85 bb       	out	0x15, r24	; 21
			while(!(PINA & (0x01)));
  8c:	c8 9b       	sbis	0x19, 0	; 25
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x20>
  90:	ef e1       	ldi	r30, 0x1F	; 31
  92:	fe e4       	ldi	r31, 0x4E	; 78
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x28>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
  9c:	ed cf       	rjmp	.-38     	; 0x78 <main+0xc>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
