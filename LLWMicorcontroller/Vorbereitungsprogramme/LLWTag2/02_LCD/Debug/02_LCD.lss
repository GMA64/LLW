
02_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011c9  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000731  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bb  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c73  00000000  00000000  00002b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000378e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_clock>:
    while(*data != LCD_NULL)
    {
        lcd_char((unsigned char)*data);    // Send character
        data++;                             // Increment data
    }
}
  6c:	dc 9a       	sbi	0x1b, 4	; 27
  6e:	84 e1       	ldi	r24, 0x14	; 20
  70:	8a 95       	dec	r24
  72:	f1 f7       	brne	.-4      	; 0x70 <lcd_clock+0x4>
  74:	dc 98       	cbi	0x1b, 4	; 27
  76:	84 e1       	ldi	r24, 0x14	; 20
  78:	8a 95       	dec	r24
  7a:	f1 f7       	brne	.-4      	; 0x78 <lcd_clock+0xc>
  7c:	08 95       	ret

0000007e <lcd_set>:
  7e:	98 b3       	in	r25, 0x18	; 24
  80:	9b 71       	andi	r25, 0x1B	; 27
  82:	98 bb       	out	0x18, r25	; 24
  84:	88 23       	and	r24, r24
  86:	0c f4       	brge	.+2      	; 0x8a <lcd_set+0xc>
  88:	c7 9a       	sbi	0x18, 7	; 24
  8a:	86 fd       	sbrc	r24, 6
  8c:	c6 9a       	sbi	0x18, 6	; 24
  8e:	85 fd       	sbrc	r24, 5
  90:	c5 9a       	sbi	0x18, 5	; 24
  92:	84 fd       	sbrc	r24, 4
  94:	c2 9a       	sbi	0x18, 2	; 24
  96:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_clock>
  9a:	08 95       	ret

0000009c <lcd_cmd>:
  9c:	cf 93       	push	r28
  9e:	c8 2f       	mov	r28, r24
  a0:	de 98       	cbi	0x1b, 6	; 27
  a2:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
  a6:	8c 2f       	mov	r24, r28
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
  b0:	84 e9       	ldi	r24, 0x94	; 148
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_cmd+0x16>
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <lcd_char>:
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
  be:	de 9a       	sbi	0x1b, 6	; 27
  c0:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
  c4:	8c 2f       	mov	r24, r28
  c6:	82 95       	swap	r24
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
  ce:	84 e9       	ldi	r24, 0x94	; 148
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_char+0x16>
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_clear>:
//  +---------------------------------------------------------------+
//  |                       LCD clear screen                        |
//  +---------------------------------------------------------------+
void lcd_clear(void)
{
    lcd_cmd(LCD_CLEAR);         // Clear the LCD screen
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f e6       	ldi	r24, 0x6F	; 111
  e0:	97 e1       	ldi	r25, 0x17	; 23
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_clear+0xa>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_clear+0x10>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <lcd_init>:
//  |                       LCD initialization                      |
//  +---------------------------------------------------------------+
void lcd_init(void)
{
    // Initialize LCD command and data lines
    LCD_DDR_CTRL |= (1<<LCD_RS) | (1<<LCD_E);
  ec:	8a b3       	in	r24, 0x1a	; 26
  ee:	80 65       	ori	r24, 0x50	; 80
  f0:	8a bb       	out	0x1a, r24	; 26
    LCD_DDR_DATA |= (1<<LCD_DB3) | (1<<LCD_DB2) | (1<<LCD_DB1) | (1<<LCD_DB0);
  f2:	87 b3       	in	r24, 0x17	; 23
  f4:	84 6e       	ori	r24, 0xE4	; 228
  f6:	87 bb       	out	0x17, r24	; 23
    
    LCD_PORT_CTRL &= ~((1<<LCD_RS) | (1<<LCD_E));
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	8f 7a       	andi	r24, 0xAF	; 175
  fc:	8b bb       	out	0x1b, r24	; 27
    LCD_PORT_DATA &= ~((1<<LCD_DB3) | (1<<LCD_DB2) | (1<<LCD_DB1) | (1<<LCD_DB0));
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8b 71       	andi	r24, 0x1B	; 27
 102:	88 bb       	out	0x18, r24	; 24
 104:	8f e2       	ldi	r24, 0x2F	; 47
 106:	95 e7       	ldi	r25, 0x75	; 117
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_init+0x1c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_init+0x22>
 10e:	00 00       	nop
    
    // Wait until LCD has started
    _delay_ms(LCD_STARTUP_TIME);
    
    // Setup 4 bit mode & wait function time
    lcd_set(LCD_FUNCTION);
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	94 e9       	ldi	r25, 0x94	; 148
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_init+0x2c>
    _delay_us(LCD_FUNCTION_TIME);
    
    // Setup LCD settings
    lcd_cmd(LCD_FUNCTION | LCD_FUNCTION_2LINE);                                 // Setup number of display lines and character font
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
    lcd_cmd(LCD_DISPLAY | LCD_DISPLAY_ON);  // | LCD_CURSOR_ON | LCD_BLINK_ON); // Setup display status, display cursor, display cursor blink
 122:	8c e0       	ldi	r24, 0x0C	; 12
 124:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
    lcd_cmd(LCD_ENTRY | LCD_ENTRY_INCREMENT);                                   // Setup display cursor move direction
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>

    // Clears entire display
    lcd_clear();
 12e:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_clear>
 132:	08 95       	ret

00000134 <lcd_home>:
//  +---------------------------------------------------------------+
//  |                   LCD cursor to home position                 |
//  +---------------------------------------------------------------+
void lcd_home(void)
{
    lcd_cmd(LCD_HOME);          // Return cursor to the start position (0/0)
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e6       	ldi	r24, 0x6F	; 111
 13c:	97 e1       	ldi	r25, 0x17	; 23
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_home+0xa>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_home+0x10>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <lcd_cursor>:
//  |               y   ->  cursor to Y position                    |
//  +---------------------------------------------------------------+
void lcd_cursor(unsigned char x, unsigned char y)
{
    // Switch to LCD display line
    switch(y)
 148:	61 30       	cpi	r22, 0x01	; 1
 14a:	51 f0       	breq	.+20     	; 0x160 <lcd_cursor+0x18>
 14c:	28 f0       	brcs	.+10     	; 0x158 <lcd_cursor+0x10>
 14e:	62 30       	cpi	r22, 0x02	; 2
 150:	59 f0       	breq	.+22     	; 0x168 <lcd_cursor+0x20>
 152:	63 30       	cpi	r22, 0x03	; 3
 154:	69 f0       	breq	.+26     	; 0x170 <lcd_cursor+0x28>
 156:	08 95       	ret
    {
        case 0  :   lcd_cmd(LCD_START_ADDR + x);                    break;  // Start at display line 0 and column x
 158:	80 58       	subi	r24, 0x80	; 128
 15a:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
 15e:	08 95       	ret
        case 1  :   lcd_cmd(LCD_START_ADDR + 0x40 + x);             break;  // Start at display line 1 and column x
 160:	80 54       	subi	r24, 0x40	; 64
 162:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
 166:	08 95       	ret
        case 2  :   lcd_cmd(LCD_START_ADDR + LCD_COLUMNS * 2 + x);  break;  // Start at display line 2 and column x
 168:	80 57       	subi	r24, 0x70	; 112
 16a:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
 16e:	08 95       	ret
        case 3  :   lcd_cmd(LCD_START_ADDR + 0x50 + x);             break;  // Start at display line 3 and column x
 170:	80 53       	subi	r24, 0x30	; 48
 172:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
 176:	08 95       	ret

00000178 <main>:
 178:	0e 94 76 00 	call	0xec	; 0xec <lcd_init>
 17c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_home>
 180:	84 e5       	ldi	r24, 0x54	; 84
 182:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
 186:	85 e4       	ldi	r24, 0x45	; 69
 188:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
 18c:	83 e5       	ldi	r24, 0x53	; 83
 18e:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
 192:	84 e5       	ldi	r24, 0x54	; 84
 194:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_cursor>
 1a0:	81 e3       	ldi	r24, 0x31	; 49
 1a2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
 1a6:	85 e4       	ldi	r24, 0x45	; 69
 1a8:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
 1ac:	83 e5       	ldi	r24, 0x53	; 83
 1ae:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
 1b2:	84 e5       	ldi	r24, 0x54	; 84
 1b4:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
 1b8:	e1 cf       	rjmp	.-62     	; 0x17c <main+0x4>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
