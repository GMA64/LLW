
04_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000398  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011e2  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  00001712  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000713  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047b  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c73  00000000  00000000  00002cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003946  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  7a:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_clock>:
    }
    else
    {
        lcd_string(&buffer[count - length]);
    }
}
  82:	dc 9a       	sbi	0x1b, 4	; 27
  84:	84 e1       	ldi	r24, 0x14	; 20
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <lcd_clock+0x4>
  8a:	dc 98       	cbi	0x1b, 4	; 27
  8c:	84 e1       	ldi	r24, 0x14	; 20
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_clock+0xc>
  92:	08 95       	ret

00000094 <lcd_set>:
  94:	98 b3       	in	r25, 0x18	; 24
  96:	9b 71       	andi	r25, 0x1B	; 27
  98:	98 bb       	out	0x18, r25	; 24
  9a:	88 23       	and	r24, r24
  9c:	0c f4       	brge	.+2      	; 0xa0 <lcd_set+0xc>
  9e:	c7 9a       	sbi	0x18, 7	; 24
  a0:	86 fd       	sbrc	r24, 6
  a2:	c6 9a       	sbi	0x18, 6	; 24
  a4:	85 fd       	sbrc	r24, 5
  a6:	c5 9a       	sbi	0x18, 5	; 24
  a8:	84 fd       	sbrc	r24, 4
  aa:	c2 9a       	sbi	0x18, 2	; 24
  ac:	0e 94 41 00 	call	0x82	; 0x82 <lcd_clock>
  b0:	08 95       	ret

000000b2 <lcd_cmd>:
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
  b6:	de 98       	cbi	0x1b, 6	; 27
  b8:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
  bc:	8c 2f       	mov	r24, r28
  be:	82 95       	swap	r24
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
  c6:	84 e9       	ldi	r24, 0x94	; 148
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_cmd+0x16>
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <lcd_char>:
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
  d4:	de 9a       	sbi	0x1b, 6	; 27
  d6:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
  da:	8c 2f       	mov	r24, r28
  dc:	82 95       	swap	r24
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
  e4:	84 e9       	ldi	r24, 0x94	; 148
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_char+0x16>
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <lcd_string>:
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
  f4:	88 81       	ld	r24, Y
  f6:	88 23       	and	r24, r24
  f8:	31 f0       	breq	.+12     	; 0x106 <lcd_string+0x18>
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_char>
 100:	89 91       	ld	r24, Y+
 102:	81 11       	cpse	r24, r1
 104:	fb cf       	rjmp	.-10     	; 0xfc <lcd_string+0xe>
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_clear>:
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 112:	8f e6       	ldi	r24, 0x6F	; 111
 114:	97 e1       	ldi	r25, 0x17	; 23
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_clear+0xa>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_clear+0x10>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <lcd_init>:
 120:	8a b3       	in	r24, 0x1a	; 26
 122:	80 65       	ori	r24, 0x50	; 80
 124:	8a bb       	out	0x1a, r24	; 26
 126:	87 b3       	in	r24, 0x17	; 23
 128:	84 6e       	ori	r24, 0xE4	; 228
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	8b b3       	in	r24, 0x1b	; 27
 12e:	8f 7a       	andi	r24, 0xAF	; 175
 130:	8b bb       	out	0x1b, r24	; 27
 132:	88 b3       	in	r24, 0x18	; 24
 134:	8b 71       	andi	r24, 0x1B	; 27
 136:	88 bb       	out	0x18, r24	; 24
 138:	8f e2       	ldi	r24, 0x2F	; 47
 13a:	95 e7       	ldi	r25, 0x75	; 117
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_init+0x22>
 142:	00 00       	nop
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
 14a:	94 e9       	ldi	r25, 0x94	; 148
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x2c>
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 162:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_clear>
 166:	08 95       	ret

00000168 <lcd_home>:
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 16e:	8f e6       	ldi	r24, 0x6F	; 111
 170:	97 e1       	ldi	r25, 0x17	; 23
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_home+0xa>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_home+0x10>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <lcd_cursor>:
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	51 f0       	breq	.+20     	; 0x194 <lcd_cursor+0x18>
 180:	28 f0       	brcs	.+10     	; 0x18c <lcd_cursor+0x10>
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	59 f0       	breq	.+22     	; 0x19c <lcd_cursor+0x20>
 186:	63 30       	cpi	r22, 0x03	; 3
 188:	69 f0       	breq	.+26     	; 0x1a4 <lcd_cursor+0x28>
 18a:	08 95       	ret
 18c:	80 58       	subi	r24, 0x80	; 128
 18e:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 192:	08 95       	ret
 194:	80 54       	subi	r24, 0x40	; 64
 196:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 19a:	08 95       	ret
 19c:	80 57       	subi	r24, 0x70	; 112
 19e:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 1a2:	08 95       	ret
 1a4:	80 53       	subi	r24, 0x30	; 48
 1a6:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 1aa:	08 95       	ret

000001ac <lcd_sl2ascii>:
//  | Parameter:    data    ->  number to convert                   |
//  |               radix   ->  2/10/16                             |
//  |               length  ->  ASCII characters 1 - 10             |
//  +---------------------------------------------------------------+
void lcd_sl2ascii(const signed long data, unsigned char base, unsigned char length)
{
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	a1 97       	sbiw	r28, 0x21	; 33
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
    // If base is wrong or length is to short/wide return
    if((base != 2 && base != 10 && base != 16) || (length < 1 || length > 10))
 1cc:	42 30       	cpi	r20, 0x02	; 2
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <lcd_sl2ascii+0x26>
 1d0:	52 c0       	rjmp	.+164    	; 0x276 <lcd_sl2ascii+0xca>
 1d2:	4a 30       	cpi	r20, 0x0A	; 10
 1d4:	19 f0       	breq	.+6      	; 0x1dc <lcd_sl2ascii+0x30>
 1d6:	40 31       	cpi	r20, 0x10	; 16
 1d8:	09 f0       	breq	.+2      	; 0x1dc <lcd_sl2ascii+0x30>
 1da:	58 c0       	rjmp	.+176    	; 0x28c <lcd_sl2ascii+0xe0>
 1dc:	3f ef       	ldi	r19, 0xFF	; 255
 1de:	32 0f       	add	r19, r18
 1e0:	3a 30       	cpi	r19, 0x0A	; 10
 1e2:	08 f0       	brcs	.+2      	; 0x1e6 <lcd_sl2ascii+0x3a>
 1e4:	53 c0       	rjmp	.+166    	; 0x28c <lcd_sl2ascii+0xe0>
    
    unsigned char count = 0;    // Internal counter for character length
    char buffer[(sizeof(long) * 8 + 1)];   // ASCII buffer 10 digits + \0 escape character
    
    // Convert data to ASCII
    ltoa(data, buffer, base);
 1e6:	e4 2f       	mov	r30, r20
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e2 2e       	mov	r14, r18
 1ec:	f4 2e       	mov	r15, r20
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
 1ee:	9f 01       	movw	r18, r30
 1f0:	ae 01       	movw	r20, r28
 1f2:	4f 5f       	subi	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ltoa>
    
    // Loop until \0 escape char is reached
    for(unsigned char i=0; i < sizeof(buffer); i++)
    {
        // Check if buffer data is not equal to \0 escape char
        if(buffer[i] != LCD_NULL)
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	88 23       	and	r24, r24
 1fe:	09 f4       	brne	.+2      	; 0x202 <lcd_sl2ascii+0x56>
 200:	41 c0       	rjmp	.+130    	; 0x284 <lcd_sl2ascii+0xd8>
 202:	fe 01       	movw	r30, r28
 204:	32 96       	adiw	r30, 0x02	; 2
            count++;    // increment data counter
 206:	11 e0       	ldi	r17, 0x01	; 1
    
    // Loop until \0 escape char is reached
    for(unsigned char i=0; i < sizeof(buffer); i++)
    {
        // Check if buffer data is not equal to \0 escape char
        if(buffer[i] != LCD_NULL)
 208:	81 91       	ld	r24, Z+
 20a:	88 23       	and	r24, r24
 20c:	19 f0       	breq	.+6      	; 0x214 <lcd_sl2ascii+0x68>
            count++;    // increment data counter
 20e:	1f 5f       	subi	r17, 0xFF	; 255
    
    // Convert data to ASCII
    ltoa(data, buffer, base);
    
    // Loop until \0 escape char is reached
    for(unsigned char i=0; i < sizeof(buffer); i++)
 210:	11 32       	cpi	r17, 0x21	; 33
 212:	d1 f7       	brne	.-12     	; 0x208 <lcd_sl2ascii+0x5c>
        else
            break;      // exit loop
    }
        
    // Check if length is greater than count
    if(count < length)
 214:	1e 15       	cp	r17, r14
 216:	a0 f4       	brcc	.+40     	; 0x240 <lcd_sl2ascii+0x94>
 218:	01 c0       	rjmp	.+2      	; 0x21c <lcd_sl2ascii+0x70>
{
    // If base is wrong or length is to short/wide return
    if((base != 2 && base != 10 && base != 16) || (length < 1 || length > 10))
        return;
    
    unsigned char count = 0;    // Internal counter for character length
 21a:	10 e0       	ldi	r17, 0x00	; 0
        
    // Check if length is greater than count
    if(count < length)
    {
        // Write spaces to LCD display until position adjustment is done
        for(unsigned char i=0; i < (length - count); i++)
 21c:	ce 2c       	mov	r12, r14
 21e:	d1 2c       	mov	r13, r1
 220:	c1 1a       	sub	r12, r17
 222:	d1 08       	sbc	r13, r1
 224:	1c 14       	cp	r1, r12
 226:	1d 04       	cpc	r1, r13
 228:	8c f4       	brge	.+34     	; 0x24c <lcd_sl2ascii+0xa0>
 22a:	00 e0       	ldi	r16, 0x00	; 0
            lcd_char(LCD_SPACE);
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_char>
        
    // Check if length is greater than count
    if(count < length)
    {
        // Write spaces to LCD display until position adjustment is done
        for(unsigned char i=0; i < (length - count); i++)
 232:	0f 5f       	subi	r16, 0xFF	; 255
 234:	80 2f       	mov	r24, r16
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	8c 15       	cp	r24, r12
 23a:	9d 05       	cpc	r25, r13
 23c:	bc f3       	brlt	.-18     	; 0x22c <lcd_sl2ascii+0x80>
 23e:	06 c0       	rjmp	.+12     	; 0x24c <lcd_sl2ascii+0xa0>
            lcd_char(LCD_SPACE);
    }
    // Check if length is lower than count
    else if(count > length)
 240:	e1 16       	cp	r14, r17
 242:	20 f4       	brcc	.+8      	; 0x24c <lcd_sl2ascii+0xa0>
    {
        // Write \0 escape char to the max. length allowed through position adjustment
        buffer[length] = LCD_NULL;
 244:	fe 01       	movw	r30, r28
 246:	ee 0d       	add	r30, r14
 248:	f1 1d       	adc	r31, r1
 24a:	11 82       	std	Z+1, r1	; 0x01
    }
    
    if(base == 10)
 24c:	2a e0       	ldi	r18, 0x0A	; 10
 24e:	f2 12       	cpse	r15, r18
 250:	05 c0       	rjmp	.+10     	; 0x25c <lcd_sl2ascii+0xb0>
    {
        // Write string to LCD
        lcd_string(buffer);
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 77 00 	call	0xee	; 0xee <lcd_string>
 25a:	18 c0       	rjmp	.+48     	; 0x28c <lcd_sl2ascii+0xe0>
    }
    else
    {
        lcd_string(&buffer[count - length]);
 25c:	81 2f       	mov	r24, r17
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	8e 19       	sub	r24, r14
 262:	91 09       	sbc	r25, r1
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	2c 0f       	add	r18, r28
 26a:	3d 1f       	adc	r19, r29
 26c:	82 0f       	add	r24, r18
 26e:	93 1f       	adc	r25, r19
 270:	0e 94 77 00 	call	0xee	; 0xee <lcd_string>
 274:	0b c0       	rjmp	.+22     	; 0x28c <lcd_sl2ascii+0xe0>
//  |               length  ->  ASCII characters 1 - 10             |
//  +---------------------------------------------------------------+
void lcd_sl2ascii(const signed long data, unsigned char base, unsigned char length)
{
    // If base is wrong or length is to short/wide return
    if((base != 2 && base != 10 && base != 16) || (length < 1 || length > 10))
 276:	3f ef       	ldi	r19, 0xFF	; 255
 278:	32 0f       	add	r19, r18
 27a:	3a 30       	cpi	r19, 0x0A	; 10
 27c:	38 f4       	brcc	.+14     	; 0x28c <lcd_sl2ascii+0xe0>
    
    unsigned char count = 0;    // Internal counter for character length
    char buffer[(sizeof(long) * 8 + 1)];   // ASCII buffer 10 digits + \0 escape character
    
    // Convert data to ASCII
    ltoa(data, buffer, base);
 27e:	e2 e0       	ldi	r30, 0x02	; 2
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	b3 cf       	rjmp	.-154    	; 0x1ea <lcd_sl2ascii+0x3e>
        else
            break;      // exit loop
    }
        
    // Check if length is greater than count
    if(count < length)
 284:	e1 10       	cpse	r14, r1
 286:	c9 cf       	rjmp	.-110    	; 0x21a <lcd_sl2ascii+0x6e>
{
    // If base is wrong or length is to short/wide return
    if((base != 2 && base != 10 && base != 16) || (length < 1 || length > 10))
        return;
    
    unsigned char count = 0;    // Internal counter for character length
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	e0 cf       	rjmp	.-64     	; 0x24c <lcd_sl2ascii+0xa0>
    }
    else
    {
        lcd_string(&buffer[count - length]);
    }
}
 28c:	a1 96       	adiw	r28, 0x21	; 33
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	08 95       	ret

000002aa <main>:
#include <avr/io.h>
#include "lcd.h"

int main(void)
{
	lcd_init();
 2aa:	0e 94 90 00 	call	0x120	; 0x120 <lcd_init>

    while (1) 
    {
		int zahl = -20;
		
		lcd_home();
 2ae:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_home>
		
		lcd_sl2ascii(zahl, 2, 8);
 2b2:	28 e0       	ldi	r18, 0x08	; 8
 2b4:	42 e0       	ldi	r20, 0x02	; 2
 2b6:	6c ee       	ldi	r22, 0xEC	; 236
 2b8:	7f ef       	ldi	r23, 0xFF	; 255
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	9f ef       	ldi	r25, 0xFF	; 255
 2be:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_sl2ascii>
		
		lcd_cursor(0,1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cursor>

		lcd_string("0x");
 2ca:	80 e6       	ldi	r24, 0x60	; 96
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 77 00 	call	0xee	; 0xee <lcd_string>
		lcd_sl2ascii(zahl, 16, 2);
 2d2:	22 e0       	ldi	r18, 0x02	; 2
 2d4:	40 e1       	ldi	r20, 0x10	; 16
 2d6:	6c ee       	ldi	r22, 0xEC	; 236
 2d8:	7f ef       	ldi	r23, 0xFF	; 255
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_sl2ascii>
		
		lcd_string(" ");
 2e2:	83 e6       	ldi	r24, 0x63	; 99
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 77 00 	call	0xee	; 0xee <lcd_string>
		lcd_sl2ascii(zahl, 10, 3);
 2ea:	23 e0       	ldi	r18, 0x03	; 3
 2ec:	4a e0       	ldi	r20, 0x0A	; 10
 2ee:	6c ee       	ldi	r22, 0xEC	; 236
 2f0:	7f ef       	ldi	r23, 0xFF	; 255
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	9f ef       	ldi	r25, 0xFF	; 255
 2f6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_sl2ascii>
 2fa:	d9 cf       	rjmp	.-78     	; 0x2ae <main+0x4>

000002fc <ltoa>:
 2fc:	25 32       	cpi	r18, 0x25	; 37
 2fe:	31 05       	cpc	r19, r1
 300:	20 f4       	brcc	.+8      	; 0x30a <ltoa+0xe>
 302:	22 30       	cpi	r18, 0x02	; 2
 304:	10 f0       	brcs	.+4      	; 0x30a <ltoa+0xe>
 306:	0c 94 89 01 	jmp	0x312	; 0x312 <__ltoa_ncheck>
 30a:	fa 01       	movw	r30, r20
 30c:	10 82       	st	Z, r1
 30e:	ca 01       	movw	r24, r20
 310:	08 95       	ret

00000312 <__ltoa_ncheck>:
 312:	bb 27       	eor	r27, r27
 314:	2a 30       	cpi	r18, 0x0A	; 10
 316:	51 f4       	brne	.+20     	; 0x32c <__ltoa_ncheck+0x1a>
 318:	99 23       	and	r25, r25
 31a:	42 f4       	brpl	.+16     	; 0x32c <__ltoa_ncheck+0x1a>
 31c:	bd e2       	ldi	r27, 0x2D	; 45
 31e:	90 95       	com	r25
 320:	80 95       	com	r24
 322:	70 95       	com	r23
 324:	61 95       	neg	r22
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	8f 4f       	sbci	r24, 0xFF	; 255
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	0c 94 99 01 	jmp	0x332	; 0x332 <__ultoa_common>

00000330 <__ultoa_ncheck>:
 330:	bb 27       	eor	r27, r27

00000332 <__ultoa_common>:
 332:	fa 01       	movw	r30, r20
 334:	a6 2f       	mov	r26, r22
 336:	62 17       	cp	r22, r18
 338:	71 05       	cpc	r23, r1
 33a:	81 05       	cpc	r24, r1
 33c:	91 05       	cpc	r25, r1
 33e:	33 0b       	sbc	r19, r19
 340:	30 fb       	bst	r19, 0
 342:	66 f0       	brts	.+24     	; 0x35c <__ultoa_common+0x2a>
 344:	aa 27       	eor	r26, r26
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	a2 17       	cp	r26, r18
 352:	10 f0       	brcs	.+4      	; 0x358 <__ultoa_common+0x26>
 354:	a2 1b       	sub	r26, r18
 356:	63 95       	inc	r22
 358:	38 50       	subi	r19, 0x08	; 8
 35a:	a9 f7       	brne	.-22     	; 0x346 <__ultoa_common+0x14>
 35c:	a0 5d       	subi	r26, 0xD0	; 208
 35e:	aa 33       	cpi	r26, 0x3A	; 58
 360:	08 f0       	brcs	.+2      	; 0x364 <__ultoa_common+0x32>
 362:	a9 5d       	subi	r26, 0xD9	; 217
 364:	a1 93       	st	Z+, r26
 366:	36 f7       	brtc	.-52     	; 0x334 <__ultoa_common+0x2>
 368:	b1 11       	cpse	r27, r1
 36a:	b1 93       	st	Z+, r27
 36c:	10 82       	st	Z, r1
 36e:	ca 01       	movw	r24, r20
 370:	0c 94 ba 01 	jmp	0x374	; 0x374 <strrev>

00000374 <strrev>:
 374:	dc 01       	movw	r26, r24
 376:	fc 01       	movw	r30, r24
 378:	67 2f       	mov	r22, r23
 37a:	71 91       	ld	r23, Z+
 37c:	77 23       	and	r23, r23
 37e:	e1 f7       	brne	.-8      	; 0x378 <strrev+0x4>
 380:	32 97       	sbiw	r30, 0x02	; 2
 382:	04 c0       	rjmp	.+8      	; 0x38c <strrev+0x18>
 384:	7c 91       	ld	r23, X
 386:	6d 93       	st	X+, r22
 388:	70 83       	st	Z, r23
 38a:	62 91       	ld	r22, -Z
 38c:	ae 17       	cp	r26, r30
 38e:	bf 07       	cpc	r27, r31
 390:	c8 f3       	brcs	.-14     	; 0x384 <strrev+0x10>
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
