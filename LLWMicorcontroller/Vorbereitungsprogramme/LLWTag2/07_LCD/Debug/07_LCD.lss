
07_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000272  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b0  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d9  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000807  00000000  00000000  00001f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d2  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d43  00000000  00000000  00002e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003bb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  7a:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_clock>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	dc 9a       	sbi	0x1b, 4	; 27
  84:	84 e1       	ldi	r24, 0x14	; 20
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <lcd_clock+0x4>
  8a:	dc 98       	cbi	0x1b, 4	; 27
  8c:	84 e1       	ldi	r24, 0x14	; 20
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_clock+0xc>
  92:	08 95       	ret

00000094 <lcd_set>:
  94:	98 b3       	in	r25, 0x18	; 24
  96:	9b 71       	andi	r25, 0x1B	; 27
  98:	98 bb       	out	0x18, r25	; 24
  9a:	88 23       	and	r24, r24
  9c:	0c f4       	brge	.+2      	; 0xa0 <lcd_set+0xc>
  9e:	c7 9a       	sbi	0x18, 7	; 24
  a0:	86 fd       	sbrc	r24, 6
  a2:	c6 9a       	sbi	0x18, 6	; 24
  a4:	85 fd       	sbrc	r24, 5
  a6:	c5 9a       	sbi	0x18, 5	; 24
  a8:	84 fd       	sbrc	r24, 4
  aa:	c2 9a       	sbi	0x18, 2	; 24
  ac:	0e 94 41 00 	call	0x82	; 0x82 <lcd_clock>
  b0:	08 95       	ret

000000b2 <lcd_cmd>:
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
  b6:	de 98       	cbi	0x1b, 6	; 27
  b8:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
  bc:	8c 2f       	mov	r24, r28
  be:	82 95       	swap	r24
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
  c6:	84 e9       	ldi	r24, 0x94	; 148
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_cmd+0x16>
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <lcd_char>:
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
  d4:	de 9a       	sbi	0x1b, 6	; 27
  d6:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
  da:	8c 2f       	mov	r24, r28
  dc:	82 95       	swap	r24
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
  e4:	84 e9       	ldi	r24, 0x94	; 148
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_char+0x16>
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <lcd_clear>:
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
  f4:	8f e6       	ldi	r24, 0x6F	; 111
  f6:	97 e1       	ldi	r25, 0x17	; 23
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_clear+0xa>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_clear+0x10>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <lcd_init>:
 102:	8a b3       	in	r24, 0x1a	; 26
 104:	80 65       	ori	r24, 0x50	; 80
 106:	8a bb       	out	0x1a, r24	; 26
 108:	87 b3       	in	r24, 0x17	; 23
 10a:	84 6e       	ori	r24, 0xE4	; 228
 10c:	87 bb       	out	0x17, r24	; 23
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	8f 7a       	andi	r24, 0xAF	; 175
 112:	8b bb       	out	0x1b, r24	; 27
 114:	88 b3       	in	r24, 0x18	; 24
 116:	8b 71       	andi	r24, 0x1B	; 27
 118:	88 bb       	out	0x18, r24	; 24
 11a:	8f e2       	ldi	r24, 0x2F	; 47
 11c:	95 e7       	ldi	r25, 0x75	; 117
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_init+0x1c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_init+0x22>
 124:	00 00       	nop
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_set>
 12c:	94 e9       	ldi	r25, 0x94	; 148
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x2c>
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 144:	0e 94 77 00 	call	0xee	; 0xee <lcd_clear>
 148:	08 95       	ret

0000014a <lcd_home>:
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 150:	8f e6       	ldi	r24, 0x6F	; 111
 152:	97 e1       	ldi	r25, 0x17	; 23
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_home+0xa>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_home+0x10>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <lcd_cursor>:
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	51 f0       	breq	.+20     	; 0x176 <lcd_cursor+0x18>
 162:	28 f0       	brcs	.+10     	; 0x16e <lcd_cursor+0x10>
 164:	62 30       	cpi	r22, 0x02	; 2
 166:	59 f0       	breq	.+22     	; 0x17e <lcd_cursor+0x20>
 168:	63 30       	cpi	r22, 0x03	; 3
 16a:	69 f0       	breq	.+26     	; 0x186 <lcd_cursor+0x28>
 16c:	08 95       	ret
 16e:	80 58       	subi	r24, 0x80	; 128
 170:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 174:	08 95       	ret
 176:	80 54       	subi	r24, 0x40	; 64
 178:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 17c:	08 95       	ret
 17e:	80 57       	subi	r24, 0x70	; 112
 180:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 184:	08 95       	ret
 186:	80 53       	subi	r24, 0x30	; 48
 188:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 18c:	08 95       	ret

0000018e <lcd_pattern>:
//  | Parameter: address    ->  pattern ram address                 |
//  |                           predefined: LCD_CGADDR_CHAR0 - (n)  |
//  |            data (ptr) ->  pattern array (5 bit x 7 rows)      |
//  +---------------------------------------------------------------+
void lcd_pattern(unsigned char address, const unsigned char *data)
{
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
    // Check if address is greater than max. allowed address
    if(address > LCD_CGADDDR_MAX)
 196:	88 30       	cpi	r24, 0x08	; 8
 198:	98 f4       	brcc	.+38     	; 0x1c0 <lcd_pattern+0x32>
 19a:	8b 01       	movw	r16, r22
        return;

    lcd_cmd(LCD_CGADDR + (address * 8));    // Setup LCD display CGADDR start address + which character
 19c:	88 0f       	add	r24, r24
 19e:	88 0f       	add	r24, r24
 1a0:	88 0f       	add	r24, r24
 1a2:	80 5c       	subi	r24, 0xC0	; 192
 1a4:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
 1a8:	e8 01       	movw	r28, r16
 1aa:	08 5f       	subi	r16, 0xF8	; 248
 1ac:	1f 4f       	sbci	r17, 0xFF	; 255
    
    // Write data to LCD display CGRAM
    for(unsigned char i=0; i < 8; i++)
        lcd_char(data[i]);
 1ae:	89 91       	ld	r24, Y+
 1b0:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_char>
        return;

    lcd_cmd(LCD_CGADDR + (address * 8));    // Setup LCD display CGADDR start address + which character
    
    // Write data to LCD display CGRAM
    for(unsigned char i=0; i < 8; i++)
 1b4:	c0 17       	cp	r28, r16
 1b6:	d1 07       	cpc	r29, r17
 1b8:	d1 f7       	brne	.-12     	; 0x1ae <lcd_pattern+0x20>
        lcd_char(data[i]);
    
    lcd_cmd(LCD_DDADDR);                    // Setup LCD display DDADDR (HOME position)
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_cmd>
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <main>:
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	60 97       	sbiw	r28, 0x10	; 16
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	0e 94 81 00 	call	0x102	; 0x102 <lcd_init>
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	e0 e6       	ldi	r30, 0x60	; 96
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	de 01       	movw	r26, r28
 1ea:	11 96       	adiw	r26, 0x01	; 1
 1ec:	01 90       	ld	r0, Z+
 1ee:	0d 92       	st	X+, r0
 1f0:	8a 95       	dec	r24
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x22>
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	e8 e6       	ldi	r30, 0x68	; 104
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	de 01       	movw	r26, r28
 1fc:	19 96       	adiw	r26, 0x09	; 9
 1fe:	01 90       	ld	r0, Z+
 200:	0d 92       	st	X+, r0
 202:	8a 95       	dec	r24
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x34>
 206:	be 01       	movw	r22, r28
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_pattern>
 212:	be 01       	movw	r22, r28
 214:	67 5f       	subi	r22, 0xF7	; 247
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_pattern>
 21e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_home>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_char>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_char>
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_cursor>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_char>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_char>
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_cursor>
 24a:	18 e0       	ldi	r17, 0x08	; 8
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	8e e9       	ldi	r24, 0x9E	; 158
 256:	94 e2       	ldi	r25, 0x24	; 36
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x8e>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x98>
 262:	00 00       	nop
 264:	11 50       	subi	r17, 0x01	; 1
 266:	91 f7       	brne	.-28     	; 0x24c <main+0x82>
 268:	0e 94 77 00 	call	0xee	; 0xee <lcd_clear>
 26c:	d8 cf       	rjmp	.-80     	; 0x21e <main+0x54>

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
