
06_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001341  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000920  00000000  00000000  0000170d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000777  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e6  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d0c  00000000  00000000  00002e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  64:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_clock>:
//  +---------------------------------------------------------------+
//  |                       LCD generate clock                      |
//  +---------------------------------------------------------------+
void lcd_clock(void)
{
    LCD_PORT_CTRL |= (1<<LCD_E);        // Enable E (HIGH) @ control port
  6c:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	84 e1       	ldi	r24, 0x14	; 20
  70:	8a 95       	dec	r24
  72:	f1 f7       	brne	.-4      	; 0x70 <lcd_clock+0x4>
    _delay_us((1000000UL/(F_LCD * 2))); // Wait half of defined clock period
    LCD_PORT_CTRL &= ~(1<<LCD_E);       // Disable E (LOW) @ control port
  74:	dc 98       	cbi	0x1b, 4	; 27
  76:	84 e1       	ldi	r24, 0x14	; 20
  78:	8a 95       	dec	r24
  7a:	f1 f7       	brne	.-4      	; 0x78 <lcd_clock+0xc>
  7c:	08 95       	ret

0000007e <lcd_set>:
//  | Parameter:    data(7:4)   ->  higher nibble data              |
//  +---------------------------------------------------------------+
void lcd_set(unsigned char data)
{
    // Reset LCD data port
    LCD_PORT_DATA &= ~((1<<LCD_DB3) | (1<<LCD_DB2) | (1<<LCD_DB1) | (1<<LCD_DB0));
  7e:	98 b3       	in	r25, 0x18	; 24
  80:	9b 71       	andi	r25, 0x1B	; 27
  82:	98 bb       	out	0x18, r25	; 24

    if(data & (1<<7))                   // Check if data bit 7 is set
  84:	88 23       	and	r24, r24
  86:	0c f4       	brge	.+2      	; 0x8a <lcd_set+0xc>
        LCD_PORT_DATA |= (1<<LCD_DB3);  // Set data bit 3 @ lcd bus
  88:	c7 9a       	sbi	0x18, 7	; 24
    if(data & (1<<6))                   // Check if data bit 6 is set
  8a:	86 fd       	sbrc	r24, 6
        LCD_PORT_DATA |= (1<<LCD_DB2);  // Set data bit 2 @ lcd bus
  8c:	c6 9a       	sbi	0x18, 6	; 24
    if(data & (1<<5))                   // Check if data bit 5 is set
  8e:	85 fd       	sbrc	r24, 5
        LCD_PORT_DATA |= (1<<LCD_DB1);  // Set data bit 1 @ lcd bus
  90:	c5 9a       	sbi	0x18, 5	; 24
    if(data & (1<<4))                   // Check if data bit 4 is set
  92:	84 fd       	sbrc	r24, 4
        LCD_PORT_DATA |= (1<<LCD_DB0);  // Set data bit 0 @ lcd bus
  94:	c2 9a       	sbi	0x18, 2	; 24

    // Generate a clock period
    lcd_clock();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_clock>
  9a:	08 95       	ret

0000009c <lcd_cmd>:
//  |                   LCD instruction transfer                    |
//  +---------------------------------------------------------------+
//  | Parameter:    instruction ->  display command                 |
//  +---------------------------------------------------------------+
void lcd_cmd(unsigned char instruction)
{
  9c:	cf 93       	push	r28
  9e:	c8 2f       	mov	r28, r24
    // Select instruction register
    LCD_PORT_CTRL &= ~(1<<LCD_RS);
  a0:	de 98       	cbi	0x1b, 6	; 27
    
    lcd_set(instruction);       // Write high nibble to databus
  a2:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
    lcd_set((instruction<<4));  // Write low nibble to databus
  a6:	8c 2f       	mov	r24, r28
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
  b0:	84 e9       	ldi	r24, 0x94	; 148
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_cmd+0x16>
    
    // Wait until instruction is accessed on the LCD
    _delay_us(LCD_CMD_TIME);
}
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <lcd_char>:
//  |                   LCD character transfer                      |
//  +---------------------------------------------------------------+
//  | Parameter:    data    ->  ASCII/defined character             |
//  +---------------------------------------------------------------+
void lcd_char(unsigned char data)
{
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
    // Select data register
    LCD_PORT_CTRL |= (1<<LCD_RS);
  be:	de 9a       	sbi	0x1b, 6	; 27
    
    lcd_set(data);      // Write high nibble to databus
  c0:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
    lcd_set((data<<4)); // Write low nibble to databus
  c4:	8c 2f       	mov	r24, r28
  c6:	82 95       	swap	r24
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
  ce:	84 e9       	ldi	r24, 0x94	; 148
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_char+0x16>
    
    // Wait until data is accessed on the LCD
    _delay_us(LCD_WRITE_TIME);
}
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_string>:
//  |                       LCD string transfer                     |
//  +---------------------------------------------------------------+
//  | Parameter:    data (ptr)  ->  ASCII/ defined character array  |
//  +---------------------------------------------------------------+
void lcd_string(const char *data)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
    // Wait until \0 escape char is reached
    while(*data != LCD_NULL)
  de:	88 81       	ld	r24, Y
  e0:	88 23       	and	r24, r24
  e2:	31 f0       	breq	.+12     	; 0xf0 <lcd_string+0x18>
  e4:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_char((unsigned char)*data);    // Send character
  e6:	0e 94 5d 00 	call	0xba	; 0xba <lcd_char>
//  | Parameter:    data (ptr)  ->  ASCII/ defined character array  |
//  +---------------------------------------------------------------+
void lcd_string(const char *data)
{
    // Wait until \0 escape char is reached
    while(*data != LCD_NULL)
  ea:	89 91       	ld	r24, Y+
  ec:	81 11       	cpse	r24, r1
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <lcd_string+0xe>
    {
        lcd_char((unsigned char)*data);    // Send character
        data++;                             // Increment data
    }
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <lcd_clear>:
//  +---------------------------------------------------------------+
//  |                       LCD clear screen                        |
//  +---------------------------------------------------------------+
void lcd_clear(void)
{
    lcd_cmd(LCD_CLEAR);         // Clear the LCD screen
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e6       	ldi	r24, 0x6F	; 111
  fe:	97 e1       	ldi	r25, 0x17	; 23
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_clear+0xa>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_clear+0x10>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <lcd_init>:
//  |                       LCD initialization                      |
//  +---------------------------------------------------------------+
void lcd_init(void)
{
    // Initialize LCD command and data lines
    LCD_DDR_CTRL |= (1<<LCD_RS) | (1<<LCD_E);
 10a:	8a b3       	in	r24, 0x1a	; 26
 10c:	80 65       	ori	r24, 0x50	; 80
 10e:	8a bb       	out	0x1a, r24	; 26
    LCD_DDR_DATA |= (1<<LCD_DB3) | (1<<LCD_DB2) | (1<<LCD_DB1) | (1<<LCD_DB0);
 110:	87 b3       	in	r24, 0x17	; 23
 112:	84 6e       	ori	r24, 0xE4	; 228
 114:	87 bb       	out	0x17, r24	; 23
    
    LCD_PORT_CTRL &= ~((1<<LCD_RS) | (1<<LCD_E));
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8f 7a       	andi	r24, 0xAF	; 175
 11a:	8b bb       	out	0x1b, r24	; 27
    LCD_PORT_DATA &= ~((1<<LCD_DB3) | (1<<LCD_DB2) | (1<<LCD_DB1) | (1<<LCD_DB0));
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	8b 71       	andi	r24, 0x1B	; 27
 120:	88 bb       	out	0x18, r24	; 24
 122:	8f e2       	ldi	r24, 0x2F	; 47
 124:	95 e7       	ldi	r25, 0x75	; 117
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x1c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x22>
 12c:	00 00       	nop
    
    // Wait until LCD has started
    _delay_ms(LCD_STARTUP_TIME);
    
    // Setup 4 bit mode & wait function time
    lcd_set(LCD_FUNCTION);
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	0e 94 3f 00 	call	0x7e	; 0x7e <lcd_set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	94 e9       	ldi	r25, 0x94	; 148
 136:	9a 95       	dec	r25
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x2c>
    _delay_us(LCD_FUNCTION_TIME);
    
    // Setup LCD settings
    lcd_cmd(LCD_FUNCTION | LCD_FUNCTION_2LINE);                                 // Setup number of display lines and character font
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
    lcd_cmd(LCD_DISPLAY | LCD_DISPLAY_ON);  // | LCD_CURSOR_ON | LCD_BLINK_ON); // Setup display status, display cursor, display cursor blink
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
    lcd_cmd(LCD_ENTRY | LCD_ENTRY_INCREMENT);                                   // Setup display cursor move direction
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>

    // Clears entire display
    lcd_clear();
 14c:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_clear>
 150:	08 95       	ret

00000152 <lcd_home>:
//  +---------------------------------------------------------------+
//  |                   LCD cursor to home position                 |
//  +---------------------------------------------------------------+
void lcd_home(void)
{
    lcd_cmd(LCD_HOME);          // Return cursor to the start position (0/0)
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	8f e6       	ldi	r24, 0x6F	; 111
 15a:	97 e1       	ldi	r25, 0x17	; 23
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_home+0xa>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_home+0x10>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <lcd_cursor>:
//  |               y   ->  cursor to Y position                    |
//  +---------------------------------------------------------------+
void lcd_cursor(unsigned char x, unsigned char y)
{
    // Switch to LCD display line
    switch(y)
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	51 f0       	breq	.+20     	; 0x17e <lcd_cursor+0x18>
 16a:	28 f0       	brcs	.+10     	; 0x176 <lcd_cursor+0x10>
 16c:	62 30       	cpi	r22, 0x02	; 2
 16e:	59 f0       	breq	.+22     	; 0x186 <lcd_cursor+0x20>
 170:	63 30       	cpi	r22, 0x03	; 3
 172:	69 f0       	breq	.+26     	; 0x18e <lcd_cursor+0x28>
 174:	08 95       	ret
    {
        case 0  :   lcd_cmd(LCD_START_ADDR + x);                    break;  // Start at display line 0 and column x
 176:	80 58       	subi	r24, 0x80	; 128
 178:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
 17c:	08 95       	ret
        case 1  :   lcd_cmd(LCD_START_ADDR + 0x40 + x);             break;  // Start at display line 1 and column x
 17e:	80 54       	subi	r24, 0x40	; 64
 180:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
 184:	08 95       	ret
        case 2  :   lcd_cmd(LCD_START_ADDR + LCD_COLUMNS * 2 + x);  break;  // Start at display line 2 and column x
 186:	80 57       	subi	r24, 0x70	; 112
 188:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
 18c:	08 95       	ret
        case 3  :   lcd_cmd(LCD_START_ADDR + 0x50 + x);             break;  // Start at display line 3 and column x
 18e:	80 53       	subi	r24, 0x30	; 48
 190:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_cmd>
 194:	08 95       	ret

00000196 <main>:
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	c4 56       	subi	r28, 0x64	; 100
 1a0:	d1 09       	sbc	r29, r1
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
 1ac:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_init>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 1b0:	4a e0       	ldi	r20, 0x0A	; 10
 1b2:	be 01       	movw	r22, r28
 1b4:	6f 5f       	subi	r22, 0xFF	; 255
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255
 1b8:	84 e1       	ldi	r24, 0x14	; 20
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 02 01 	call	0x204	; 0x204 <__utoa_ncheck>
 1c0:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_home>
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_string>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1cc:	4a e0       	ldi	r20, 0x0A	; 10
 1ce:	be 01       	movw	r22, r28
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	8c ee       	ldi	r24, 0xEC	; 236
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__itoa_ncheck>
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_cursor>
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_string>
 1ec:	e1 cf       	rjmp	.-62     	; 0x1b0 <main+0x1a>

000001ee <__itoa_ncheck>:
 1ee:	bb 27       	eor	r27, r27
 1f0:	4a 30       	cpi	r20, 0x0A	; 10
 1f2:	31 f4       	brne	.+12     	; 0x200 <__itoa_ncheck+0x12>
 1f4:	99 23       	and	r25, r25
 1f6:	22 f4       	brpl	.+8      	; 0x200 <__itoa_ncheck+0x12>
 1f8:	bd e2       	ldi	r27, 0x2D	; 45
 1fa:	90 95       	com	r25
 1fc:	81 95       	neg	r24
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	0c 94 03 01 	jmp	0x206	; 0x206 <__utoa_common>

00000204 <__utoa_ncheck>:
 204:	bb 27       	eor	r27, r27

00000206 <__utoa_common>:
 206:	fb 01       	movw	r30, r22
 208:	55 27       	eor	r21, r21
 20a:	aa 27       	eor	r26, r26
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	aa 1f       	adc	r26, r26
 212:	a4 17       	cp	r26, r20
 214:	10 f0       	brcs	.+4      	; 0x21a <__utoa_common+0x14>
 216:	a4 1b       	sub	r26, r20
 218:	83 95       	inc	r24
 21a:	50 51       	subi	r21, 0x10	; 16
 21c:	b9 f7       	brne	.-18     	; 0x20c <__utoa_common+0x6>
 21e:	a0 5d       	subi	r26, 0xD0	; 208
 220:	aa 33       	cpi	r26, 0x3A	; 58
 222:	08 f0       	brcs	.+2      	; 0x226 <__utoa_common+0x20>
 224:	a9 5d       	subi	r26, 0xD9	; 217
 226:	a1 93       	st	Z+, r26
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	79 f7       	brne	.-34     	; 0x20a <__utoa_common+0x4>
 22c:	b1 11       	cpse	r27, r1
 22e:	b1 93       	st	Z+, r27
 230:	11 92       	st	Z+, r1
 232:	cb 01       	movw	r24, r22
 234:	0c 94 1c 01 	jmp	0x238	; 0x238 <strrev>

00000238 <strrev>:
 238:	dc 01       	movw	r26, r24
 23a:	fc 01       	movw	r30, r24
 23c:	67 2f       	mov	r22, r23
 23e:	71 91       	ld	r23, Z+
 240:	77 23       	and	r23, r23
 242:	e1 f7       	brne	.-8      	; 0x23c <strrev+0x4>
 244:	32 97       	sbiw	r30, 0x02	; 2
 246:	04 c0       	rjmp	.+8      	; 0x250 <strrev+0x18>
 248:	7c 91       	ld	r23, X
 24a:	6d 93       	st	X+, r22
 24c:	70 83       	st	Z, r23
 24e:	62 91       	ld	r22, -Z
 250:	ae 17       	cp	r26, r30
 252:	bf 07       	cpc	r27, r31
 254:	c8 f3       	brcs	.-14     	; 0x248 <strrev+0x10>
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
